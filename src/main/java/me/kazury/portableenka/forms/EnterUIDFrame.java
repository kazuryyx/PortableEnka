package me.kazury.portableenka.forms;

import me.kazury.portableenka.Main;
import me.kazury.portableenka.MenuManager;
import me.kazury.portableenka.util.GlobalConfig;
import me.kazury.portableenka.util.RoundedBorder;
import me.kazury.portableenka.util.adapters.DocumentRemoveEvent;
import me.kazury.portableenka.util.adapters.FocusAdapter;
import me.kazury.portableenka.util.adapters.MouseClickAdapter;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;
import java.util.regex.Pattern;

public class EnterUIDFrame extends JFrame {
    private final Pattern pattern = Pattern.compile("^(18|[1-35-9])\\d{8}$");

    public JPanel mainPanel;
    public JTextArea textBox;
    public JPanel enterLabel;
    public JLabel proceed;

    public JButton ratingExplanationButton;

    public void afterInit() {
        final MenuManager menuManager = Main.getMenuManager();

        this.proceed.addMouseListener(new MouseClickAdapter((event) -> {
            final String text = textBox.getText().trim();

            if (text.equals("Enter UID...")) return;
            if (text.isBlank()) return;

            if (!this.pattern.matcher(text).matches()) {
                final ErrorFrame errorFrame = menuManager.openErrorFrame(
                        "Invalid UID",
                        "UID must be 9 (or 10) digits long and number.",
                        this);

                errorFrame.quitButton.addMouseListener(new MouseClickAdapter((ev) -> menuManager.openUIDFrame(errorFrame)));
                return;
            }

            final long uid = Long.parseLong(text);
            final JFrame loadingFrame = Main.getMenuManager().openLoadingFrame(this);

            menuManager.openSelectionFrame(uid, loadingFrame);
        }));

        this.textBox.setText("Enter UID...");
        this.textBox.setForeground(Color.decode("#c2c6cc"));

        this.textBox.addFocusListener(new FocusAdapter((event) -> {
            final String text = this.textBox.getText();
            if (!text.equals("Enter UID...")) return;

            this.textBox.setText("");
            this.textBox.setForeground(Color.WHITE);
        }, (event) -> {
            final String text = this.textBox.getText();
            if (!text.isEmpty()) return;

            this.textBox.setForeground(Color.decode("#c2c6cc"));
            this.textBox.setText("Enter UID...");
        }));
    }

    private void createUIComponents() {
        this.enterLabel = RoundedBorder.adjustPanel(
                new Dimension(400, 75),
                GlobalConfig.ROUNDED_BORDER_COLOR,
                new FlowLayout(),
                32, 32
        );
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        mainPanel.setMinimumSize(new Dimension(550, 440));
        mainPanel.setOpaque(false);
        mainPanel.setPreferredSize(new Dimension(550, 440));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.setPreferredSize(new Dimension(490, 125));
        mainPanel.add(panel1);
        final JLabel label1 = new JLabel();
        label1.setIcon(new ImageIcon(getClass().getResource("/enka.png")));
        label1.setPreferredSize(new Dimension(100, 115));
        label1.setText("");
        panel1.add(label1);
        final JLabel label2 = new JLabel();
        label2.setFocusable(true);
        Font label2Font = this.$$$getFont$$$("Cooper Black", -1, 36, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setForeground(new Color(-1));
        label2.setHorizontalAlignment(0);
        label2.setPreferredSize(new Dimension(275, 115));
        label2.setText("Portable Enka");
        panel1.add(label2);
        final JLabel label3 = new JLabel();
        label3.setIcon(new ImageIcon(getClass().getResource("/enka.png")));
        label3.setPreferredSize(new Dimension(100, 115));
        label3.setText("");
        panel1.add(label3);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel2.setPreferredSize(new Dimension(490, 260));
        mainPanel.add(panel2);
        enterLabel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        enterLabel.setBackground(new Color(-15658734));
        enterLabel.setPreferredSize(new Dimension(400, 75));
        panel2.add(enterLabel);
        textBox = new JTextArea();
        textBox.setFocusCycleRoot(false);
        Font textBoxFont = this.$$$getFont$$$("Segoe UI Black", -1, 26, textBox.getFont());
        if (textBoxFont != null) textBox.setFont(textBoxFont);
        textBox.setLineWrap(false);
        textBox.setMargin(new Insets(15, 20, 0, 0));
        textBox.setMinimumSize(new Dimension(120, 38));
        textBox.setOpaque(false);
        textBox.setPreferredSize(new Dimension(325, 65));
        textBox.setRequestFocusEnabled(true);
        textBox.setSelectionStart(0);
        textBox.setText("");
        enterLabel.add(textBox);
        proceed = new JLabel();
        proceed.setIcon(new ImageIcon(getClass().getResource("/arrow.png")));
        proceed.setMinimumSize(new Dimension(65, 65));
        proceed.setPreferredSize(new Dimension(60, 68));
        proceed.setRequestFocusEnabled(true);
        proceed.setText("");
        enterLabel.add(proceed);
        ratingExplanationButton = new JButton();
        Font ratingExplanationButtonFont = this.$$$getFont$$$("Franklin Gothic Heavy", -1, 15, ratingExplanationButton.getFont());
        if (ratingExplanationButtonFont != null) ratingExplanationButton.setFont(ratingExplanationButtonFont);
        ratingExplanationButton.setForeground(new Color(-599034));
        ratingExplanationButton.setPreferredSize(new Dimension(250, 55));
        ratingExplanationButton.setText("Rating Explanation");
        panel2.add(ratingExplanationButton);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
